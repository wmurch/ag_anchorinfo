// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ag_anchorinfo;

namespace ag_anchorinfo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200113161828_anyThingNew")]
    partial class anyThingNew
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ag_anchorinfo.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ag_anchorinfo.Models.LineSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("BottomInspection");

                    b.Property<string>("BottonInspectionType");

                    b.Property<string>("CapperMake");

                    b.Property<string>("CapperModel");

                    b.Property<string>("CapperType");

                    b.Property<string>("CasePackerDrop");

                    b.Property<string>("CasePackerWrap");

                    b.Property<string>("DePalletizerType");

                    b.Property<bool>("DudDetector");

                    b.Property<string>("DudDetectorType");

                    b.Property<string>("FillerFillTubeSize");

                    b.Property<string>("FillerMake");

                    b.Property<string>("FillerModel");

                    b.Property<int>("FillerProductTemp");

                    b.Property<int>("FillerSpeed");

                    b.Property<string>("IncomingInspection");

                    b.Property<string>("IssueDate");

                    b.Property<string>("LSFoodNotes");

                    b.Property<string>("LabelModel");

                    b.Property<string>("LabelType");

                    b.Property<string>("Labeler");

                    b.Property<int>("LabelerAmount");

                    b.Property<string>("LabelerMake");

                    b.Property<string>("LineDesignation");

                    b.Property<string>("PalletSize");

                    b.Property<string>("Responsibility");

                    b.Property<string>("RevisionDate");

                    b.Property<string>("RinserTwistRotary");

                    b.Property<int>("RinserWaterTemp");

                    b.Property<string>("SheetNumber");

                    b.Property<string>("StagedDuration");

                    b.Property<string>("TopNumber");

                    b.HasKey("Id");

                    b.ToTable("LineSurveys");
                });

            modelBuilder.Entity("ag_anchorinfo.Models.LineSurveyBeer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LSBeerNotes");

                    b.Property<string>("PasturizerMaxTemp");

                    b.HasKey("Id");

                    b.ToTable("LineSurveyBeers");
                });

            modelBuilder.Entity("ag_anchorinfo.Models.LineSurveyFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoolerZone1");

                    b.Property<string>("CoolerZone2");

                    b.Property<string>("CoolerZone3");

                    b.Property<string>("CoolerZone4");

                    b.Property<string>("PreHeatTunnelHighTemp");

                    b.Property<string>("PreHeatTunnelLength");

                    b.HasKey("Id");

                    b.ToTable("LineSurveyFoods");
                });

            modelBuilder.Entity("ag_anchorinfo.Models.LineSurveyLiquor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorkerDiameter");

                    b.Property<string>("CorkerLength");

                    b.Property<string>("CorkerType");

                    b.HasKey("Id");

                    b.ToTable("LineSurveyLiquors");
                });

            modelBuilder.Entity("ag_anchorinfo.Models.ProspectiveCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AMEmail");

                    b.Property<string>("CustomerNumber");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProspectiveCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
